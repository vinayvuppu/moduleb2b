// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`render when the cart is empty should match snapshot 1`] = `
<Card
  theme="light"
  type="raised"
>
  <Stack
    alignItems="stretch"
    scale="s"
  >
    <Inline
      alignItems="center"
      justifyContent="flex-start"
      scale="xs"
    >
      <CartIcon
        size="medium"
      />
      <TextDetail
        intlMessage={
          Object {
            "defaultMessage": "{items} items",
            "description": "items label when items are selected",
            "id": "CartSummary.itemsLabel",
            "values": Object {
              "items": 0,
            },
          }
        }
        isBold={true}
        tone="information"
      />
      <TextDetail
        isBold={true}
      >
        <FormattedMessage
          defaultMessage="in your cart"
          description="title for the cart summary panel"
          id="CartSummary.cartSummaryTitle"
          values={Object {}}
        />
      </TextDetail>
    </Inline>
    <div
      className="separator"
    />
    <TextDetail
      tone="secondary"
    >
      <FormattedMessage
        defaultMessage="Your shopping cart is empty"
        description="label for the empty shopping cart message"
        id="CartSummary.emptyShoppingCartLabel"
        values={Object {}}
      />
    </TextDetail>
    <div
      className="separator"
    />
    <SummaryItem>
      <TextDetail
        isBold={true}
      >
        <FormattedMessage
          defaultMessage="Subtotal"
          description="label for the cart subtotal"
          id="CartSummary.subtotalLabel"
          values={Object {}}
        />
      </TextDetail>
      <TextDetail
        isBold={true}
      >
        EUR 0
      </TextDetail>
    </SummaryItem>
    <div
      className="separator"
    />
    <SummaryItem>
      <TextBody
        isBold={true}
      >
        <FormattedMessage
          defaultMessage="Total (gross)"
          description="label for the cart total"
          id="CartSummary.totalLabel"
          values={Object {}}
        />
      </TextBody>
      <TextBody
        isBold={true}
      >
        EUR 0
      </TextBody>
    </SummaryItem>
  </Stack>
</Card>
`;

exports[`render when the cart is not empty when cart discounts are set to the cart should match snapshot 1`] = `
<Card
  theme="light"
  type="raised"
>
  <Stack
    alignItems="stretch"
    scale="s"
  >
    <Inline
      alignItems="center"
      justifyContent="flex-start"
      scale="xs"
    >
      <CartIcon
        size="medium"
      />
      <TextDetail
        intlMessage={
          Object {
            "defaultMessage": "{items} items",
            "description": "items label when items are selected",
            "id": "CartSummary.itemsLabel",
            "values": Object {
              "items": 1,
            },
          }
        }
        isBold={true}
        tone="information"
      />
      <TextDetail
        isBold={true}
      >
        <FormattedMessage
          defaultMessage="in your cart"
          description="title for the cart summary panel"
          id="CartSummary.cartSummaryTitle"
          values={Object {}}
        />
      </TextDetail>
    </Inline>
    <div
      className="separator"
    />
    <SummaryItem
      key="line-item-id"
    >
      <Inline
        alignItems="flex-start"
        justifyContent="flex-start"
        scale="s"
      >
        <IconButton
          data-testid="remove-line-item-line-item-id"
          icon={<CloseBoldIcon />}
          isToggleButton={false}
          label="CartSummary.removeLineItem"
          onClick={[Function]}
          shape="round"
          size="small"
          theme="default"
          type="button"
        />
        <Stack
          alignItems="stretch"
          scale="s"
        >
          <TextDetail
            isBold={true}
          >
            <withApplicationContext(Localize)
              object={
                Object {
                  "discountedPricePerQuantity": Array [],
                  "id": "line-item-id",
                  "name": Object {
                    "en": "item name",
                  },
                  "price": Object {
                    "value": Object {
                      "centAmount": 1800,
                      "currencyCode": "EUR",
                    },
                  },
                  "quantity": 1,
                  "totalPrice": Object {
                    "centAmount": 1800,
                    "currencyCode": "EUR",
                  },
                  "variant": Object {
                    "attributesRaw": Array [],
                  },
                }
              }
              objectKey="name"
            />
          </TextDetail>
        </Stack>
      </Inline>
      <Stack
        alignItems="flexEnd"
        scale="s"
      >
        <TextDetail
          tone="secondary"
        >
          EUR 18
        </TextDetail>
        <Inline
          alignItems="flex-start"
          justifyContent="flex-start"
          scale="s"
        >
          <IconButton
            icon={<EditIcon />}
            isToggleButton={false}
            label="CartSummary.changeQuantity"
            onClick={[Function]}
            shape="round"
            size="small"
            theme="default"
            type="button"
          />
          <TextDetail
            isBold={true}
          >
            <FormattedMessage
              defaultMessage="Qty: {quantity}"
              description="label for the line item quantity"
              id="CartSummary.quantityLabel"
              values={
                Object {
                  "quantity": 1,
                }
              }
            />
          </TextDetail>
        </Inline>
        <TextDetail
          isBold={true}
        >
          EUR 18
        </TextDetail>
      </Stack>
    </SummaryItem>
    <div
      className="separator"
    />
    <SummaryItem>
      <TextDetail
        isBold={true}
      >
        <FormattedMessage
          defaultMessage="Subtotal"
          description="label for the cart subtotal"
          id="CartSummary.subtotalLabel"
          values={Object {}}
        />
      </TextDetail>
      <TextDetail
        isBold={true}
      >
        EUR 23
      </TextDetail>
    </SummaryItem>
    <SummaryItem
      key="cart-discount-id"
    >
      <TextDetail
        tone="secondary"
      >
        <withApplicationContext(Localize)
          object={
            Object {
              "amount": Object {
                "centAmount": 500,
                "currencyCode": "EUR",
              },
              "id": "cart-discount-id",
              "name": Object {
                "en": "cart-discount-name",
              },
            }
          }
          objectKey="name"
        />
      </TextDetail>
      <TextDetail
        tone="secondary"
      >
        - EUR 5
      </TextDetail>
    </SummaryItem>
    <Stack
      alignItems="stretch"
      scale="s"
    >
      <div
        className="separator"
      />
      <SummaryItem>
        <TextDetail
          isBold={true}
        >
          <FormattedMessage
            defaultMessage="Discount codes"
            id="CartSummary.discountCodes"
            values={Object {}}
          />
        </TextDetail>
      </SummaryItem>
      <SummaryItem
        key="discount-code-id"
      >
        <Inline
          alignItems="flex-start"
          justifyContent="flex-start"
          scale="s"
        >
          <IconButton
            data-testid="remove-discount-discount-code-id"
            icon={<CloseBoldIcon />}
            isToggleButton={false}
            label="CartSummary.removeDiscount"
            onClick={[Function]}
            shape="round"
            size="small"
            theme="default"
            type="button"
          />
          <TextDetail
            tone="secondary"
          >
            code-1
          </TextDetail>
        </Inline>
      </SummaryItem>
    </Stack>
    <Stack
      alignItems="stretch"
      scale="s"
    >
      <div
        className="separator"
      />
      <SummaryItem>
        <TextDetail
          isBold={true}
        >
          <FormattedMessage
            defaultMessage="Subtotal Discounts"
            description="label for the cart subtotal after discounts applied"
            id="CartSummary.subtotalDiscountsLabel"
            values={Object {}}
          />
        </TextDetail>
        <TextDetail
          isBold={true}
        >
          EUR 18
        </TextDetail>
      </SummaryItem>
    </Stack>
    <SummaryItem
      key="0"
    >
      <TextDetail
        tone="secondary"
      >
        12% tax portion
      </TextDetail>
      <TextDetail
        tone="secondary"
      >
        + EUR 2
      </TextDetail>
    </SummaryItem>
    <SummaryItem>
      <Stack
        alignItems="stretch"
        scale="xs"
      >
        <TextDetail
          tone="secondary"
        >
          <FormattedMessage
            defaultMessage="Shipping(gross)"
            description="label for the shipping"
            id="CartSummary.shippingLabel"
            values={Object {}}
          />
        </TextDetail>
        <TextDetail
          tone="secondary"
        >
          DHL
        </TextDetail>
      </Stack>
      <TextDetail
        tone="secondary"
      >
        + EUR 1
      </TextDetail>
    </SummaryItem>
    <div
      className="separator"
    />
    <SummaryItem>
      <TextBody
        isBold={true}
      >
        <FormattedMessage
          defaultMessage="Total (gross)"
          description="label for the cart total"
          id="CartSummary.totalLabel"
          values={Object {}}
        />
      </TextBody>
      <TextBody
        isBold={true}
      >
        EUR 20
      </TextBody>
    </SummaryItem>
  </Stack>
</Card>
`;

exports[`render when the cart is not empty when no cart discounts are set to the cart should match snapshot 1`] = `
<Card
  theme="light"
  type="raised"
>
  <Stack
    alignItems="stretch"
    scale="s"
  >
    <Inline
      alignItems="center"
      justifyContent="flex-start"
      scale="xs"
    >
      <CartIcon
        size="medium"
      />
      <TextDetail
        intlMessage={
          Object {
            "defaultMessage": "{items} items",
            "description": "items label when items are selected",
            "id": "CartSummary.itemsLabel",
            "values": Object {
              "items": 1,
            },
          }
        }
        isBold={true}
        tone="information"
      />
      <TextDetail
        isBold={true}
      >
        <FormattedMessage
          defaultMessage="in your cart"
          description="title for the cart summary panel"
          id="CartSummary.cartSummaryTitle"
          values={Object {}}
        />
      </TextDetail>
    </Inline>
    <div
      className="separator"
    />
    <SummaryItem
      key="line-item-id"
    >
      <Inline
        alignItems="flex-start"
        justifyContent="flex-start"
        scale="s"
      >
        <IconButton
          data-testid="remove-line-item-line-item-id"
          icon={<CloseBoldIcon />}
          isToggleButton={false}
          label="CartSummary.removeLineItem"
          onClick={[Function]}
          shape="round"
          size="small"
          theme="default"
          type="button"
        />
        <Stack
          alignItems="stretch"
          scale="s"
        >
          <TextDetail
            isBold={true}
          >
            <withApplicationContext(Localize)
              object={
                Object {
                  "discountedPricePerQuantity": Array [],
                  "id": "line-item-id",
                  "name": Object {
                    "en": "item name",
                  },
                  "price": Object {
                    "value": Object {
                      "centAmount": 1800,
                      "currencyCode": "EUR",
                    },
                  },
                  "quantity": 1,
                  "totalPrice": Object {
                    "centAmount": 1800,
                    "currencyCode": "EUR",
                  },
                  "variant": Object {
                    "attributesRaw": Array [],
                  },
                }
              }
              objectKey="name"
            />
          </TextDetail>
        </Stack>
      </Inline>
      <Stack
        alignItems="flexEnd"
        scale="s"
      >
        <TextDetail
          tone="secondary"
        >
          EUR 18
        </TextDetail>
        <Inline
          alignItems="flex-start"
          justifyContent="flex-start"
          scale="s"
        >
          <IconButton
            icon={<EditIcon />}
            isToggleButton={false}
            label="CartSummary.changeQuantity"
            onClick={[Function]}
            shape="round"
            size="small"
            theme="default"
            type="button"
          />
          <TextDetail
            isBold={true}
          >
            <FormattedMessage
              defaultMessage="Qty: {quantity}"
              description="label for the line item quantity"
              id="CartSummary.quantityLabel"
              values={
                Object {
                  "quantity": 1,
                }
              }
            />
          </TextDetail>
        </Inline>
        <TextDetail
          isBold={true}
        >
          EUR 18
        </TextDetail>
      </Stack>
    </SummaryItem>
    <div
      className="separator"
    />
    <SummaryItem>
      <TextDetail
        isBold={true}
      >
        <FormattedMessage
          defaultMessage="Subtotal"
          description="label for the cart subtotal"
          id="CartSummary.subtotalLabel"
          values={Object {}}
        />
      </TextDetail>
      <TextDetail
        isBold={true}
      >
        EUR 18
      </TextDetail>
    </SummaryItem>
    <SummaryItem
      key="0"
    >
      <TextDetail
        tone="secondary"
      >
        12% tax portion
      </TextDetail>
      <TextDetail
        tone="secondary"
      >
        + EUR 2
      </TextDetail>
    </SummaryItem>
    <SummaryItem>
      <Stack
        alignItems="stretch"
        scale="xs"
      >
        <TextDetail
          tone="secondary"
        >
          <FormattedMessage
            defaultMessage="Shipping(gross)"
            description="label for the shipping"
            id="CartSummary.shippingLabel"
            values={Object {}}
          />
        </TextDetail>
        <TextDetail
          tone="secondary"
        >
          DHL
        </TextDetail>
      </Stack>
      <TextDetail
        tone="secondary"
      >
        + EUR 1
      </TextDetail>
    </SummaryItem>
    <div
      className="separator"
    />
    <SummaryItem>
      <TextBody
        isBold={true}
      >
        <FormattedMessage
          defaultMessage="Total (gross)"
          description="label for the cart total"
          id="CartSummary.totalLabel"
          values={Object {}}
        />
      </TextBody>
      <TextBody
        isBold={true}
      >
        EUR 20
      </TextBody>
    </SummaryItem>
  </Stack>
</Card>
`;

exports[`render when the cart is not empty when the change quantity modal is open should match snapshot 1`] = `
<Card
  theme="light"
  type="raised"
>
  <Stack
    alignItems="stretch"
    scale="s"
  >
    <Inline
      alignItems="center"
      justifyContent="flex-start"
      scale="xs"
    >
      <CartIcon
        size="medium"
      />
      <TextDetail
        intlMessage={
          Object {
            "defaultMessage": "{items} items",
            "description": "items label when items are selected",
            "id": "CartSummary.itemsLabel",
            "values": Object {
              "items": 1,
            },
          }
        }
        isBold={true}
        tone="information"
      />
      <TextDetail
        isBold={true}
      >
        <FormattedMessage
          defaultMessage="in your cart"
          description="title for the cart summary panel"
          id="CartSummary.cartSummaryTitle"
          values={Object {}}
        />
      </TextDetail>
    </Inline>
    <div
      className="separator"
    />
    <SummaryItem
      key="line-item-id"
    >
      <Inline
        alignItems="flex-start"
        justifyContent="flex-start"
        scale="s"
      >
        <IconButton
          data-testid="remove-line-item-line-item-id"
          icon={<CloseBoldIcon />}
          isToggleButton={false}
          label="CartSummary.removeLineItem"
          onClick={[Function]}
          shape="round"
          size="small"
          theme="default"
          type="button"
        />
        <Stack
          alignItems="stretch"
          scale="s"
        >
          <TextDetail
            isBold={true}
          >
            <withApplicationContext(Localize)
              object={
                Object {
                  "discountedPricePerQuantity": Array [],
                  "id": "line-item-id",
                  "name": Object {
                    "en": "item name",
                  },
                  "price": Object {
                    "value": Object {
                      "centAmount": 1800,
                      "currencyCode": "EUR",
                    },
                  },
                  "quantity": 1,
                  "totalPrice": Object {
                    "centAmount": 1800,
                    "currencyCode": "EUR",
                  },
                  "variant": Object {
                    "attributesRaw": Array [],
                  },
                }
              }
              objectKey="name"
            />
          </TextDetail>
        </Stack>
      </Inline>
      <Stack
        alignItems="flexEnd"
        scale="s"
      >
        <TextDetail
          tone="secondary"
        >
          EUR 18
        </TextDetail>
        <Inline
          alignItems="flex-start"
          justifyContent="flex-start"
          scale="s"
        >
          <IconButton
            icon={<EditIcon />}
            isToggleButton={false}
            label="CartSummary.changeQuantity"
            onClick={[Function]}
            shape="round"
            size="small"
            theme="default"
            type="button"
          />
          <TextDetail
            isBold={true}
          >
            <FormattedMessage
              defaultMessage="Qty: {quantity}"
              description="label for the line item quantity"
              id="CartSummary.quantityLabel"
              values={
                Object {
                  "quantity": 1,
                }
              }
            />
          </TextDetail>
        </Inline>
        <TextDetail
          isBold={true}
        >
          EUR 18
        </TextDetail>
      </Stack>
    </SummaryItem>
    <div
      className="separator"
    />
    <SummaryItem>
      <TextDetail
        isBold={true}
      >
        <FormattedMessage
          defaultMessage="Subtotal"
          description="label for the cart subtotal"
          id="CartSummary.subtotalLabel"
          values={Object {}}
        />
      </TextDetail>
      <TextDetail
        isBold={true}
      >
        EUR 18
      </TextDetail>
    </SummaryItem>
    <SummaryItem
      key="0"
    >
      <TextDetail
        tone="secondary"
      >
        12% tax portion
      </TextDetail>
      <TextDetail
        tone="secondary"
      >
        + EUR 2
      </TextDetail>
    </SummaryItem>
    <SummaryItem>
      <Stack
        alignItems="stretch"
        scale="xs"
      >
        <TextDetail
          tone="secondary"
        >
          <FormattedMessage
            defaultMessage="Shipping(gross)"
            description="label for the shipping"
            id="CartSummary.shippingLabel"
            values={Object {}}
          />
        </TextDetail>
        <TextDetail
          tone="secondary"
        >
          DHL
        </TextDetail>
      </Stack>
      <TextDetail
        tone="secondary"
      >
        + EUR 1
      </TextDetail>
    </SummaryItem>
    <div
      className="separator"
    />
    <SummaryItem>
      <TextBody
        isBold={true}
      >
        <FormattedMessage
          defaultMessage="Total (gross)"
          description="label for the cart total"
          id="CartSummary.totalLabel"
          values={Object {}}
        />
      </TextBody>
      <TextBody
        isBold={true}
      >
        EUR 20
      </TextBody>
    </SummaryItem>
  </Stack>
  <ChangeQuantityModal
    handleOnClose={[Function]}
    handleOnSave={[Function]}
    isOpen={true}
    productName="product-name"
    quantity={1}
  />
</Card>
`;
