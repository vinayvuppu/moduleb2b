// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`named exports renderItem should render dropdown option 1`] = `
<div>
  <strong>
    <withApplicationContext(Localize)
      fallback="- - - -"
      object={
        Object {
          "key": "foo",
          "name": null,
        }
      }
      objectKey="name"
    />
  </strong>
  <div>
    <FormattedMessage
      defaultMessage="Key"
      description="key label"
      id="CompanyReferenceFilter.key"
      values={Object {}}
    />
    : foo
  </div>
</div>
`;

exports[`named exports renderItem when store has no name should return fallback 1`] = `
<div>
  <strong>
    <withApplicationContext(Localize)
      fallback="- - - -"
      object={
        Object {
          "key": "foo",
          "name": null,
        }
      }
      objectKey="name"
    />
  </strong>
  <div>
    <FormattedMessage
      defaultMessage="Key"
      description="key label"
      id="CompanyReferenceFilter.key"
      values={Object {}}
    />
    : foo
  </div>
</div>
`;

exports[`withDereferencedResource should compose components 1`] = `
<ContextProvider
  value={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatDateToParts": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
    }
  }
>
  <injectIntl(withApplicationContext(InnerComponent)) />
</ContextProvider>
`;
